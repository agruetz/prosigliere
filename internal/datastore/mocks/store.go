// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	datastore "prosigliere/internal/datastore"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: ctx, blogID, content, author
func (_m *Store) AddComment(ctx context.Context, blogID datastore.ID, content string, author string) (datastore.ID, error) {
	ret := _m.Called(ctx, blogID, content, author)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 datastore.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID, string, string) (datastore.ID, error)); ok {
		return rf(ctx, blogID, content, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID, string, string) datastore.ID); ok {
		r0 = rf(ctx, blogID, content, author)
	} else {
		r0 = ret.Get(0).(datastore.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, datastore.ID, string, string) error); ok {
		r1 = rf(ctx, blogID, content, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, title, content
func (_m *Store) Create(ctx context.Context, title string, content string) (datastore.ID, error) {
	ret := _m.Called(ctx, title, content)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 datastore.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (datastore.ID, error)); ok {
		return rf(ctx, title, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) datastore.ID); ok {
		r0 = rf(ctx, title, content)
	} else {
		r0 = ret.Get(0).(datastore.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, title, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Store) Delete(ctx context.Context, id datastore.ID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Store) Get(ctx context.Context, id datastore.ID) (*datastore.Blog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *datastore.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID) (*datastore.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID) *datastore.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, datastore.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, pageSize, pageToken
func (_m *Store) List(ctx context.Context, pageSize int32, pageToken string) ([]*datastore.BlogSummary, string, error) {
	ret := _m.Called(ctx, pageSize, pageToken)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*datastore.BlogSummary
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) ([]*datastore.BlogSummary, string, error)); ok {
		return rf(ctx, pageSize, pageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) []*datastore.BlogSummary); ok {
		r0 = rf(ctx, pageSize, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.BlogSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) string); ok {
		r1 = rf(ctx, pageSize, pageToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string) error); ok {
		r2 = rf(ctx, pageSize, pageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, id, title, content
func (_m *Store) Update(ctx context.Context, id datastore.ID, title *string, content *string) error {
	ret := _m.Called(ctx, id, title, content)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ID, *string, *string) error); ok {
		r0 = rf(ctx, id, title, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
